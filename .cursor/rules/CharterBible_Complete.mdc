---
description: "Unified development rules for the Charter Aviation platform, used by AI assistants and developers in Cursor."
globs: 
alwaysApply: true
---

# CharterBible: Unified Development Rules for Charter Aviation Platform

## ‚ú® Purpose
A single, authoritative set of rules combining the best of our Cursor standards, platform-specific conventions, and third-party guidance for maintaining high-quality, performant, secure, and accessible code across the Charter platform.

---

## üîß General Conventions
- **Framework**: Next.js App Router (TypeScript mandatory)
- **Architecture**: Functional React components + Hooks only
- **Styling**: TailwindCSS + Material UI + Design Tokens
- **Testing**: Jest + React Testing Library (‚â•80% coverage)
- **Commit Messages**: [Conventional Commits](mdc:https:/www.conventionalcommits.org)

---

## üõ†Ô∏è Technical Stack
- **Front-End**: Next.js (App Router), React, TypeScript
- **Database**: Firebase Firestore
  - Separate projects/instances for dev, test, prod
  - Local emulator for development
  - Security rules in `firestore.rules`
- **Back-End**: Python (Cloud Functions or serverless APIs)
- **Search**: Elasticsearch (dev & prod indexes on Elastic.co)
- **CI/CD & Hosting**: GitHub Actions ‚Üí Vercel

---

## üöÄ Performance & SEO
1. **Images**: Always use `next/image` with explicit `width`/`height` and lazy loading
2. **Code Splitting**: Dynamic imports (`next/dynamic`) for large modules
3. **Metadata**:
   - Dynamic `<Head>` tags: `title`, `description`, `og:*`, `twitter:card`, `canonical`
   - Maintain `robots.txt`, `sitemap.xml`
4. **Structured Data**: JSON‚ÄëLD (schema.org types: Organization, Service, BreadcrumbList)
5. **URL Structure**: Clean, descriptive paths; consistent trailing slash; redirects
6. **Web Vitals**: Aim for LCP<2.5s, FID<100ms, CLS<0.1

---

## üì¶ Development Guidelines

### File & Project Structure
```txt
src/
‚îú‚îÄ‚îÄ app/                   # Next.js routes + layouts
‚îú‚îÄ‚îÄ components/            # Reusable UI components
‚îú‚îÄ‚îÄ contexts/              # React Context providers
‚îú‚îÄ‚îÄ lib/                   # Core utilities & API wrappers
‚îú‚îÄ‚îÄ hooks/                 # Custom React Hooks
‚îú‚îÄ‚îÄ styles/                # Global CSS & design tokens
‚îî‚îÄ‚îÄ utils/                 # CLI scripts & helpers
```

### üè∑Ô∏è Naming Conventions
- **Components**: PascalCase (`UserCard.tsx`)
- **Files**: kebab-case (`user-card.tsx`)
- **Functions**: camelCase (`fetchUser()`)
- **Constants**: UPPER_SNAKE_CASE (`MAX_SEATS`)
- **Directories**: grouped by feature/domain (`auth/`, `booking/`, `dashboard/`)

### Component Structure
- Always TypeScript (.tsx)
- Explicit prop and return types
- Single responsibility per component
- Dark mode support via `useTheme` or Tailwind `dark:` prefix
- Default loading/error states
- ARIA labels for accessibility

### Routing & API
- **Pages**: `app/` folder with `layout.tsx`, `page.tsx`, `[id]/page.tsx`
- **API**: `src/app/api/<route>/route.ts`
- Protect routes via `AuthContext` guards
- Use `next/link` and `next/navigation` hooks

---

## üé® Styling & Design Tokens
- Mobile‚Äëfirst with Tailwind responsive variants (`sm:`, `md:`, `lg:`)
- Design tokens defined in `style-dictionary/tokens/global.json`
- Generate CSS & JS tokens: `npm run build:tokens`
- Import `tokens.css` in `globals.css`, extend Tailwind in `tailwind.config.js`

### Typography
```css
h1 { font-size: 3.5rem; }
h2 { font-size: 2.5rem; }
h3 { font-size: 2rem; }
body { font-size: 1rem; }
```
- Fonts: Playfair Display (Headings), Inter (Body), Montserrat (Nav)

### Colors
- Primary: `#1A2B3C`; Secondary: `#C4A962`; Accent: `#7CB9E8`
- Background: `#FFFFFF`; Text: `#0A0A0A`

---

## üß™ Testing
- **Unit**: All utilities in `lib/`, `utils/` with Jest
- **Component**: React Testing Library + snapshots
- **Integration/E2E**: Critical user flows (login, booking) via Playwright or Cypress
- CI fails on lint/type/test errors

---

## üîê Security & Environment
- Never commit `.env` or secret files; use `.env.example`
- Sanitize inputs client/server-side
- Role‚Äëbased auth: Firebase custom claims
- Secure cookies: `httpOnly`, `secure`, `SameSite=Strict`

---

## üîÅ Git & CI/CD
- **Branching**: `feature/*`, `bugfix/*`, `release/*`, `hotfix/*`
- **PRs**: Conventional commits, description, screenshot/tests
- **CI Pipeline**:
  1. `npm run lint`
  2. `npm run type-check`
  3. `npm run test`
  4. `npm run build`
  5. Deploy to Vercel

---

## üßë‚Äçü¶Ø Accessibility
- Semantic HTML tags (`<header>`, `<main>`, `<nav>`, `<footer>`)
- Keyboard navigation & focus styles
- ARIA roles/labels on interactive elements
- Color contrast ‚â• 4.5:1

---

## üìù Other Guidance
- **Coding Patterns**: Prefer simple solutions; avoid duplication; adhere to existing patterns; limit file size to 200‚Äì300 lines
- **Workflow**: Tackle only relevant code; write tests before refactoring; assess cross‚Äëimpact of changes

---

Replace any types
The sizes: 'any' usage should be typed explicitly (e.g., sizes: string[] or a more specific union type) to benefit from TypeScript‚Äôs safety.

Review logic conditions
Ensure comparisons like val === true are necessary; if val is boolean, you can simplify to if (val).


## üìö Resources
- [React Component Standards](mdc:https:/raw.githubusercontent.com/zuchka/cursor-setup-react-nextjs-tailwind/refs/heads/main/ReactComponentStandards.md)
- [Next App Router Patterns](mdc:https:/raw.githubusercontent.com/zuchka/cursor-setup-react-nextjs-tailwind/refs/heads/main/NextAppRouterPatterns.md)
- [Tailwind CSS Guidelines](mdc:https:/raw.githubusercontent.com/zuchka/cursor-setup-react-nextjs-tailwind/refs/heads/main/TailwindCSSGuidelines.md)
- @https://mui.com/material-ui/migration/upgrade-to-v7/ 
- @https://mui.com/material-ui/migration/upgrade-to-grid-v2/ 
- @https://mui.com/material-ui/migration/pickers-migration/ 

The platform we are building together is a private jet charter marketplace called Charter. Think of it like Airbnb for private jet flights. 

Charter acts as the intermediary that connects clients to aircraft operators and aircraft operators to clients. A client is a passenger, agent or broker. An operator is an air operator certificate holder. For the operator, Charter effectively acts as an aviation broker. For the passenger, agent/broker Charter effectively acts as a marketplace that makes it easy and convenient for them to find and manage private flights for themselves or their clients. 

The core benefit for the operator is to access a large client base at effectively no cost to them and without needing to do any marketing.

The core benefit for the purchaser is that they access a wide selection of operators and receive multiple quotes with just one request.

Charter takes a small commission 3% added to the operators quote for this service.


Here is the basic flow of operations for the average flight booking:

(1a) An operator signs up to charter (1b) and offers up their available fleet of aircraft through their Charter backend.

(2a) A passenger, Agent / Broker, will use Charter to request the specific flight that they are looking for. Routing, date, number of pax, one way or return. (2b) The buyer signs up to action their request.

(3a) The operator receives the flight request via the Charter platform (3b) and submits a price / quote. (3c) The Charter commission of 3% is added to the quote. (3d) The quote is issued to the client via the charter platform.

(4a) The client receives the operator's quote via the platform. (4b)The client accepts the quote. (4c) The system alerts the operator that a quote has been accepted. (4d) The client is required to upload all passenger information. (4e)The client records all passenger information in the Charter backend. 

(5a) The operator receives the accepted quote via the platform (5b) and acknowledges the client's acceptance. (5c) At this point, the flight is created in the system but is provisional pending payment.

(6a) The Charter platform creates a proforma invoice on behalf of the operator and issues it to Charter. (6b) The Charter platform issues an invoice to the client via the platform.

(7a) The client makes a manual transfer payment. (7b) Charter admin manually checks for the payment in the bank account (7c) and admin manually marks the flight as paid. (7d) The flight is now active in the system. (7e) E-tickets are issued to the client, one for each passenger on the flight.

(8a) Charter admin makes a manual bank payment to the operator. (8b) Admin, mark the invoice as paid. (8c) The operator is notified of the payment.

(9a) After the flight date, the flight is marked as complete on the platform. (9b) The client is asked to rate the service of the operator. (9c) The ratings are recorded in the platform.

This concludes a flight in its most basic form.

## üõ†Ô∏è Technical Stack
- **Front-End**: Next.js (App Router), React, TypeScript
- **Mobile**: React Native CLI (iOS) - Located in separate `~/CharterMobile` directory
  - Shared utilities and types between web and mobile platforms
  - React Navigation with bottom tab structure (Dashboard, QuoteRequest, Flights, Profile)
  - Firebase authentication integration for mobile
  - Native iOS deployment pipeline to TestFlight/App Store
  - Project structure mirrors web app conventions with mobile-specific optimizations
- **Database**: Firebase Firestore
  - Separate projects/instances for dev, test, prod
  - Local emulator for development
  - Security rules in `firestore.rules`
- **Back-End**: Python (Cloud Functions or serverless APIs)
- **Search**: Elasticsearch (dev & prod indexes on Elastic.co)
- **CI/CD & Hosting**: GitHub Actions ‚Üí Vercel (Web), TestFlight/App Store (iOS)

---

## üì± Mobile Platform Integration

### **CharterMobile iOS App**
- **Location**: `~/CharterMobile` directory (separate from web app)
- **Framework**: React Native CLI (not Expo) for native iOS development
- **Architecture**: Companion app to Charter web platform, not standalone
- **Code Sharing**: Utilizes shared types and utilities from web app for consistency

### **Mobile-Web Synchronization**
- **Shared Resources**: Common TypeScript types, utility functions, and business logic
- **Data Consistency**: Identical API contracts and data structures between platforms
- **User Flow Parity**: Mobile app mirrors web app user flows (Quote Request ‚Üí Offers ‚Üí Booking ‚Üí Payment)
- **Authentication**: Unified Firebase auth system across web and mobile

### **Development Considerations**
- Mobile changes must be compatible with web app data structures
- Web app serves as source of truth for business logic and API contracts
- Mobile app focuses on optimized user experience for iOS platform
- Both platforms maintain Charter branding and design consistency

### **Path Requirements**
- CharterMobile must be located in path without spaces (React Native/Xcode limitation)
- Recommended location: `~/CharterMobile` for clean build process
- Avoid paths with special characters or spaces that cause build failures

