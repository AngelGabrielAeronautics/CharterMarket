rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // TEMPORARY DEBUG RULES - MORE PERMISSIVE
    // These rules allow broader access to help debug the permission issues
    // TODO: Revert to more restrictive rules once booking flow is working
    
    // Helper function to check if a document is locked
    function isLocked(data) {
      return data != null && data.locked == true;
    }
    
    // Helper function to check if user is superAdmin
    function isSuperAdmin() {
      return request.auth != null && request.auth.token.role == 'superAdmin';
    }

    // Helper function to check if user is admin or superAdmin
    function isAdmin() {
      return request.auth != null && 
             (request.auth.token.role == 'admin' || request.auth.token.role == 'superAdmin');
    }

    // Helper function to check if user has specific role
    function hasRole(role) {
      return request.auth != null && request.auth.token.role == role;
    }

    // Helper function to check if user owns the resource by userCode
    function isOwnerByUserCode(userCode) {
      return request.auth != null && request.auth.token.userCode == userCode;
    }

    // TEMPORARY: More permissive resource access for debugging
    function canAccessResource(userCode) {
      return request.auth != null && 
             (request.auth.token.userCode == userCode || 
              request.auth.token.role == 'admin' || 
              request.auth.token.role == 'superAdmin' ||
              request.auth.token.role == 'passenger' ||
              request.auth.token.role == 'operator');
    }

    // Users collection - allow users to create their own profile during registration
    match /users/{userCode} {
      // Allow read if authenticated
      allow read: if request.auth != null;
      
      // Allow create for authenticated users (for registration)
      allow create: if request.auth != null;
      
      // Allow update/delete only if not locked or user is superAdmin
      allow update, delete: if request.auth != null && (!isLocked(resource.data) || isSuperAdmin());
    }

    // Quote Requests collection - allow users to create and manage their own quote requests
    match /quoteRequests/{requestId} {
      // Allow read if authenticated
      allow read: if request.auth != null;
      
      // Allow create for authenticated users (for booking submissions)
      allow create: if request.auth != null;
      
      // Allow update for authenticated users (needed for status changes like draft -> pending)
      allow update: if request.auth != null;
      
      // Allow delete only if not locked or user is superAdmin
      allow delete: if request.auth != null && (!isLocked(resource.data) || isSuperAdmin());
    }

    // Quotes collection - price quotes from operators in response to quote requests
    match /quotes/{quoteId} {
      // Allow read if authenticated
      allow read: if request.auth != null;
      
      // Allow create for operators (submitting quotes)
      allow create: if request.auth != null && hasRole('operator');
      
      // Allow update if user owns the quote or is admin
      allow update: if request.auth != null && 
                       (isOwnerByUserCode(resource.data.operatorUserCode) || isAdmin()) &&
                       (!isLocked(resource.data) || isSuperAdmin());
      
      // Allow delete if user owns the quote or is superAdmin
      allow delete: if request.auth != null && 
                       (isOwnerByUserCode(resource.data.operatorUserCode) || isSuperAdmin());
    }

    // BOOKINGS - TEMPORARY PERMISSIVE RULES FOR DEBUGGING
    match /bookings/{bookingId} {
      // TEMPORARY: Allow any authenticated user to read/write bookings
      // This bypasses the specific permission checks while we debug
      allow read, write: if request.auth != null;
    }

    // PAYMENTS - TEMPORARY PERMISSIVE RULES FOR DEBUGGING
    match /payments/{paymentId} {
      // TEMPORARY: Allow any authenticated user to read/write payments
      allow read, write: if request.auth != null;
    }

    // INVOICES - TEMPORARY PERMISSIVE RULES FOR DEBUGGING
    match /invoices/{invoiceId} {
      // TEMPORARY: Allow any authenticated user to read/write invoices
      // This fixes the "Missing or insufficient permissions" error
      allow read, write: if request.auth != null;
    }

    // Ratings collection - customer ratings and reviews
    match /ratings/{ratingId} {
      // Allow read if authenticated
      allow read: if request.auth != null;
      
      // Allow create if authenticated (customers rating their experience)
      allow create: if request.auth != null;
      
      // Allow update if user owns the rating or is admin
      allow update: if request.auth != null && 
                       (isOwnerByUserCode(resource.data.customerUserCode) || isAdmin()) &&
                       (!isLocked(resource.data) || isSuperAdmin());
      
      // Allow delete if user owns the rating or is superAdmin
      allow delete: if request.auth != null && 
                       (isOwnerByUserCode(resource.data.customerUserCode) || isSuperAdmin());
    }

    // Event Logs collection - allow authenticated users to create event logs
    match /eventLogs/{eventId} {
      // Allow read for authenticated users (needed for admin dashboards)
      allow read: if request.auth != null;
      
      // Allow create for authenticated users (needed for event logging during registration, login, etc.)
      allow create: if request.auth != null;
      
      // Allow update/delete only for superAdmin (event logs should generally be immutable)
      allow update, delete: if isSuperAdmin();
    }

    // Notifications collection - user notifications
    match /notifications/{notificationId} {
      // Allow read if authenticated and (notification is for user or is admin)
      allow read: if request.auth != null && 
                     (isOwnerByUserCode(resource.data.userId) || isAdmin());
      
      // Allow create for authenticated users (system notifications, quote notifications)
      allow create: if request.auth != null;
      
      // Allow update if notification is for user or is admin
      allow update: if request.auth != null && 
                       (isOwnerByUserCode(resource.data.userId) || isAdmin());
      
      // Allow delete if notification is for user or is superAdmin
      allow delete: if request.auth != null && 
                       (isOwnerByUserCode(resource.data.userId) || isSuperAdmin());
    }

    // Notification Preferences collection - user notification settings
    match /notificationPreferences/{preferencesId} {
      // Allow read if authenticated and (preferences are for user or is admin)
      allow read: if request.auth != null && 
                     (isOwnerByUserCode(resource.data.userId) || isAdmin());
      
      // Allow create for authenticated users
      allow create: if request.auth != null;
      
      // Allow update if preferences are for user or is admin
      allow update: if request.auth != null && 
                       (isOwnerByUserCode(resource.data.userId) || isAdmin());
      
      // Allow delete if preferences are for user or is superAdmin
      allow delete: if request.auth != null && 
                       (isOwnerByUserCode(resource.data.userId) || isSuperAdmin());
    }

    // Email notifications subcollection (under notifications/{userCode}/emails)
    match /notifications/{userCode}/emails/{emailId} {
      // Allow read if authenticated and (emails are for user or is admin)
      allow read: if request.auth != null && 
                     (isOwnerByUserCode(userCode) || isAdmin());
      
      // Allow create for authenticated users (email logging)
      allow create: if request.auth != null;
      
      // Allow update/delete only for admins
      allow update, delete: if isAdmin();
    }

    // Airports collection - allow read access for airport lookups
    match /airports/{airportId} {
      allow read: if request.auth != null;
      
      // Allow write only for admins (reference data maintenance)
      allow write: if isAdmin();
    }

    // Passengers collection - passenger information
    match /passengers/{passengerId} {
      // Allow read if authenticated and (owns passenger record, is related agent, or is admin)
      allow read: if request.auth != null && 
                     (isOwnerByUserCode(resource.data.createdByUserCode) || isAdmin());
      
      // Allow create for agents and passengers
      allow create: if request.auth != null && 
                       (hasRole('agent') || hasRole('passenger'));
      
      // Allow update if user owns the passenger record or is admin
      allow update: if request.auth != null && 
                       (isOwnerByUserCode(resource.data.createdByUserCode) || isAdmin()) &&
                       (!isLocked(resource.data) || isSuperAdmin());
      
      // Allow delete if user owns the record or is superAdmin
      allow delete: if request.auth != null && 
                       (isOwnerByUserCode(resource.data.createdByUserCode) || isSuperAdmin());
    }

    // All other documents - more permissive for debugging
    match /{document=**} {
      // TEMPORARY: Allow read/write if authenticated (for debugging)
      allow read, write: if request.auth != null;
    }
    
    // Additional collection-specific rules can be added here
  }
} 